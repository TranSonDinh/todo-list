{"version":3,"sources":["img/check.svg","img/check-mark.svg","img/cancel.svg","img/tick.svg","components/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItems","this","props","item","onClick","clickCancel","linkImg","chon","checkMark","isComplete","check","className","classNames","src","height","width","title","cancel","Component","App","state","todoItems","clickItem","bind","allSelect","clickAddItem","clickAll","clickActive","clickComplete","items","index","indexOf","setState","slice","map","el","event","keyCode","text","target","value","trim","splice","Act","Comp","arr","total","length","x","push","tick","type","placeholder","onKeyDown","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cdbeef2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check.8b4d6e74.svg\";","module.exports = __webpack_public_path__ + \"static/media/check-mark.0d4e03c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/cancel.cad70081.svg\";","module.exports = __webpack_public_path__ + \"static/media/tick.3a5afd73.svg\";","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport check from '../img/check.svg';\r\nimport checkMark from '../img/check-mark.svg';\r\nimport cancel from '../img/cancel.svg';\r\n\r\nclass TodoItems extends Component {\r\n    render() {\r\n        const {item , onClick , clickCancel,chon} = this.props;\r\n        let linkImg = checkMark;\r\n        if(item.isComplete===true)\r\n            linkImg = check;\r\n         return(\r\n            <div className={classNames('icon',{'isComplete' : item.isComplete})} >\r\n                <img src={linkImg} height='30px' width='30px' onClick={onClick}/>\r\n                <p>{item.title}</p>\r\n                <img src={cancel} height={15} width={15} className='cancel' onClick={clickCancel}/>\r\n            </div>\r\n         );\r\n    }\r\n}\r\nexport default TodoItems;","import React, { Component } from 'react';\nimport './App.css';\nimport TodoItems from './components/TodoItems.js';\nimport tick from './img/tick.svg';\n\nclass App extends Component  {\n  constructor() {\n    super();\n    this.state = {\n      chon : 0,\n      todoItems : [\n        {title : 'Đi chơi' , isComplete : false},\n        {title : 'Đi học' , isComplete : false},\n        {title : 'Chơi game' , isComplete : false},\n      ]\n    };\n    this.clickItem = this.clickItem.bind(this);\n    this.allSelect = this.allSelect.bind(this);\n    this.clickAddItem = this.clickAddItem.bind(this);\n    this.clickAll = this.clickAll.bind(this);\n    this.clickActive = this.clickActive.bind(this);\n    this.clickComplete = this.clickComplete.bind(this);\n  }\n  clickItem(items){\n    return () => {\n      const isComplete = items.isComplete;\n      const {todoItems} = this.state;\n      const index = todoItems.indexOf(items);\n      this.setState({\n        todoItems : [\n          ...todoItems.slice(0,index),\n          {\n            ...items,\n            isComplete : !isComplete\n          },\n          ...todoItems.slice(index+1)\n        ]\n      });\n    };\n  }\n  allSelect(){\n    const {todoItems} = this.state;\n    this.setState({\n      todoItems: todoItems.map(el => el !== '' ?{\n          ...el,\n          isComplete : !el.isComplete\n        }:el)\n    })\n  }\n  clickAddItem(event){\n    if(event.keyCode===13){\n      let text = event.target.value;\n      if(!text) return;\n      text = text.trim();\n      if(!text) return;\n      this.setState({\n        todoItems : [\n          ...this.state.todoItems,\n          {\n            title : text,\n            isComplete :false\n          }\n        ]\n      })\n      event.target.value = '';\n    }\n  }\n  clickCancel(item){\n    return () => {\n      const {todoItems} = this.state;\n      const index = todoItems.indexOf(item);\n      this.setState({\n        todoItems : [\n          ...todoItems.splice(0,index),\n          ...todoItems.splice(index+1)\n        ]\n      });\n    }\n\n  }\n  clickAll(){\n    const {todoItems} = this.state;\n    this.setState({\n      chon : 0,\n      todoItems :[\n        ...todoItems\n      ]\n    });\n  }\n  clickActive(){\n    const {todoItems} = this.state;\n    this.setState({\n      chon : 1,\n      todoItems :[\n        ...todoItems\n      ]\n    });\n  }\n  clickComplete(){\n    const {todoItems} = this.state;\n    this.setState({\n      chon : 2,\n      todoItems :[\n        ...todoItems\n      ]\n    });\n  }\n  render() {\n    const {todoItems,chon} = this.state;\n    let Act = [];\n    let Comp = [];\n    let arr = [];\n    let total = todoItems.length;\n    todoItems.map((x) => {\n      if(x.isComplete===false)\n        Act.push(x);\n      if(x.isComplete===true)\n        Comp.push(x)\n    });\n    if(chon === 1){\n      arr = [...Act];\n      total = arr.length;\n    }\n    else if(chon === 2)\n    {\n      arr = [...Comp];\n      total = arr.length;\n    }\n    else arr = [...todoItems];\n    return (\n        <div className=\"App\">\n          <div className=\"Header\">\n            <img src={tick} height={25} width={25} onClick={this.allSelect}/>\n            <input type=\"text\" placeholder=\"Add Items...\" onKeyDown={this.clickAddItem}/>\n          </div>\n            {\n              arr.map((x,index) =>\n                <TodoItems key={index} chon={chon} item = {x} onClick={this.clickItem(x)} clickCancel={this.clickCancel(x)}/>\n              )\n            }\n          <div>\n            <p className='totalItems'>{total} items</p>\n            <div className='classify'>\n              <button onClick={this.clickAll}>All</button>\n              <button onClick={this.clickActive}>Active</button>\n              <button onClick={this.clickComplete}>Complete</button>\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}